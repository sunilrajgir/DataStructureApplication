Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let's see what happened in the first three days. x means flower bloomed and _ means flower didn't bloom in the garden.
We need 3 bouquets each should contain 1 flower.
After day 1: [x, _, _, _, _]   // we can only make one bouquet.
After day 2: [x, _, _, _, x]   // we can only make two bouquets.
After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.

class Solution {
    
    func minDays(_ bloomDay: [Int], _ m: Int, _ k: Int) -> Int {
        var mn = Int.max
        var mx = Int.min
        for i in 0..<bloomDay.count {
            mn = min(mn,bloomDay[i])
            mx = max(mx, bloomDay[i])
        }
        
        var s = mn
        var e = mx
        var res = -1
        while s<=e {
            let mid = s+(e-s)/2
            if isPossible(bloomDay,m,k,mid) {
                res = mid
                e = mid-1
            } else {
                s = mid+1
            }
        }
        
        return res
    }
    
    func isPossible(_ arr:[Int], _ m:Int, _ k:Int, _ mid:Int) -> Bool {
        var cont = 0
        var len = 0
        for i in 0..<arr.count{
            if arr[i] <= mid {
                len = len+1
                if len == k {
                    cont = cont+1
                    len = 0
                }
            } else {
                len = 0
            }
        }
        
        return cont >= m
    }
}
